package graphProject;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class GraphCreator implements ActionListener, MouseListener{

	JFrame frame = new JFrame("Graph Creator");
	GraphPanel panel = new GraphPanel();
	
	JButton nodeB = new JButton("Node");
	JButton edgeB = new JButton("Edge");
	JButton connectedB = new JButton("Test Connected");
	JTextField labels = new JTextField("A");
	JTextField firstNode = new JTextField("First");
	JTextField secondNode = new JTextField("Second");
	Container west = new Container();
	Container east = new Container();
	
	final int NODE_CREATE = 0;
	final int EDGE_FIRST = 1;
	final int EDGE_SECOND = 2;
	int state = NODE_CREATE;
	Node first = null;
	
	public GraphCreator() {
		panel.setBackground(new Color(235, 237, 235));
		frame.setSize(800, 600);
		frame.setLayout(new BorderLayout());
		frame.add(panel, BorderLayout.CENTER);
		
		//west container
		west.setLayout(new GridLayout(3,1));
		west.add(nodeB);
		nodeB.addActionListener(this);
		nodeB.setBackground(Color.ORANGE);
		west.add(edgeB);
		edgeB.addActionListener(this);
		edgeB.setBackground(Color.LIGHT_GRAY);
		west.add(labels);
		frame.add(west, BorderLayout.WEST);
		panel.addMouseListener(this);
		
		//east container
		east.setLayout(new GridLayout(3,1));
		east.add(firstNode);
		east.add(secondNode);
		east.add(connectedB);
		connectedB.addActionListener(this);
		frame.add(east, BorderLayout.EAST);
		
		//set frame visible
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	
	public static void main(String[] args) {
		new GraphCreator();

	}


	@Override
	public void mouseClicked(MouseEvent e) {
		
		
	}


	@Override
	public void mousePressed(MouseEvent e) {
		
		
	}


	@Override
	public void mouseReleased(MouseEvent e) {//when you click on the panel on the JPanel
		//System.out.println(e.getX() + ", " + e.getY());
		if(state == NODE_CREATE) {
			panel.addNode(e.getX(), e.getY(), labels.getText());
		}else if(state == EDGE_FIRST) {
			Node n = panel.getNode(e.getX(), e.getY());
			if(n != null) {//if you clicked in a circle
				first = n;
				state = EDGE_SECOND;
				n.setHighlighted(true);
			}
		}else if(state == EDGE_SECOND) {
			Node n = panel.getNode(e.getX(), e.getY());
			if(n != null && !first.equals(n)) {//if you clicked in a circle
				first.setHighlighted(false);
				panel.addEdge(first, n, labels.getText());
				first = null;
				state = EDGE_FIRST;
			}
		}
		frame.repaint();
		
	}


	@Override
	public void mouseEntered(MouseEvent e) {
		
		
	}


	@Override
	public void mouseExited(MouseEvent e) {
		
		
	}


	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource().equals(nodeB)) {//if node button is pressed
			nodeB.setBackground(Color.ORANGE);
			edgeB.setBackground(Color.LIGHT_GRAY);
			state = NODE_CREATE;
		}else if(e.getSource().equals(edgeB)) {//if edge button is pressed
			edgeB.setBackground(Color.ORANGE);
			nodeB.setBackground(Color.LIGHT_GRAY);
			state = EDGE_FIRST;
			panel.stopHighlighting();
			frame.repaint();
		}else if(e.getSource().equals(connectedB)) {//if connected button is pressed
			if(panel.nodeExists(firstNode.getText()) == false) {
				JOptionPane.showMessageDialog(frame, "First node is not in your graph.");
			}else if(panel.nodeExists(secondNode.getText()) == false) {
				JOptionPane.showMessageDialog(frame, "Second node is not in your graph.");
			}
		}
		
	}

}
