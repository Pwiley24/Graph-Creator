package graphProject;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class GraphCreator implements ActionListener, MouseListener{

	JFrame frame = new JFrame("Graph Creator");
	GraphPanel panel = new GraphPanel();
	
	JButton nodeB = new JButton("Node");
	JButton edgeB = new JButton("Edge");
	JButton connectedB = new JButton("Test Connected");
	JButton salesmanB = new JButton("Shortest Path");
	JTextField salesmanStart = new JTextField("A");
	JTextField labels = new JTextField("A");
	JTextField firstNode = new JTextField("First");
	JTextField secondNode = new JTextField("Second");
	Container west = new Container();
	Container east = new Container();
	Container south = new Container();
	
	final int NODE_CREATE = 0;
	final int EDGE_FIRST = 1;
	final int EDGE_SECOND = 2;
	int state = NODE_CREATE;
	Node first = null;
	ArrayList<ArrayList<Node>> completed = new ArrayList<ArrayList<Node>>();
	ArrayList<Integer> arrayTotal = new ArrayList<Integer>();
	
	public GraphCreator() {
		panel.setBackground(new Color(235, 237, 235));
		frame.setSize(800, 600);
		frame.setLayout(new BorderLayout());
		frame.add(panel, BorderLayout.CENTER);
		
		//west container
		west.setLayout(new GridLayout(3,1));
		west.add(nodeB);
		nodeB.addActionListener(this);
		nodeB.setBackground(Color.ORANGE);
		west.add(edgeB);
		edgeB.addActionListener(this);
		edgeB.setBackground(Color.LIGHT_GRAY);
		west.add(labels);
		frame.add(west, BorderLayout.WEST);
		panel.addMouseListener(this);
		
		//east container
		east.setLayout(new GridLayout(3,1));
		east.add(firstNode);
		east.add(secondNode);
		east.add(connectedB);
		connectedB.addActionListener(this);
		frame.add(east, BorderLayout.EAST);
		
		//South container
		south.setLayout(new GridLayout(1,2));
		south.add(salesmanStart);
		south.add(salesmanB);
		salesmanB.addActionListener(this);
		frame.add(south, BorderLayout.SOUTH);
		
		//set frame visible
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	
	public static void main(String[] args) {
		new GraphCreator();

	}


	@Override
	public void mouseClicked(MouseEvent e) {
		
		
	}


	@Override
	public void mousePressed(MouseEvent e) {
		
		
	}


	@Override
	public void mouseReleased(MouseEvent e) {//when you click on the panel on the JPanel
		//System.out.println(e.getX() + ", " + e.getY());
		if(state == NODE_CREATE) {
			panel.addNode(e.getX(), e.getY(), labels.getText());
		}else if(state == EDGE_FIRST) {
			Node n = panel.getNode(e.getX(), e.getY());
			if(n != null) {//if you clicked in a circle
				first = n;
				state = EDGE_SECOND;
				n.setHighlighted(true);
			}
		}else if(state == EDGE_SECOND) {
			Node n = panel.getNode(e.getX(), e.getY());
			if(n != null && !first.equals(n)) {//if you clicked in a circle
				String s = labels.getText();
				boolean valid = true;
				for(int i = 0; i < s.length(); i++) { //check if the edge value is a distance digit
					if(Character.isDigit(s.charAt(i)) == false){
						valid = false;
					}
				}
				if(valid == true) {
					first.setHighlighted(false);
					panel.addEdge(first, n, labels.getText());
					first = null;
					state = EDGE_FIRST;
				}else {
					JOptionPane.showMessageDialog(frame, "You can only use digits in edge labels.");
				}
				
				
			}
		}
		frame.repaint();
		
	}


	@Override
	public void mouseEntered(MouseEvent e) {
		
		
	}


	@Override
	public void mouseExited(MouseEvent e) {
		
		
	}


	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource().equals(nodeB)) {//if node button is pressed
			nodeB.setBackground(Color.ORANGE);
			edgeB.setBackground(Color.LIGHT_GRAY);
			state = NODE_CREATE;
		}else if(e.getSource().equals(edgeB)) {//if edge button is pressed
			edgeB.setBackground(Color.ORANGE);
			nodeB.setBackground(Color.LIGHT_GRAY);
			state = EDGE_FIRST;
			panel.stopHighlighting();
			frame.repaint();
		}else if(e.getSource().equals(connectedB)) {//if connected button is pressed
			if(panel.nodeExists(firstNode.getText()) == false) {
				JOptionPane.showMessageDialog(frame, "First node is not in your graph.");
			}else if(panel.nodeExists(secondNode.getText()) == false) {
				JOptionPane.showMessageDialog(frame, "Second node is not in your graph.");
			}else {
				Queue queue = new Queue();
				ArrayList<String> connectedList = new ArrayList<String>();
				connectedList.add(panel.getNode(firstNode.getText()).getLabel());
				ArrayList<String> edges = panel.getConnectedLabels(firstNode.getText());
				for(int i = 0; i < edges.size(); i++) {
					queue.enqueue(edges.get(i));
				}
				while(queue.isEmpty() == false) { //while the queue is not empty
					String currentNode = queue.dequeue(); //remove the first index node from the queue
					if(connectedList.contains(currentNode) == false) {//if the just removed node is not in the list
						connectedList.add(currentNode); //add it
					}
					edges = panel.getConnectedLabels(currentNode);
					for(int i = 0; i < edges.size(); i++) {
						if(connectedList.contains(edges.get(i)) == false) {
							queue.enqueue(edges.get(i));
						}
					}
				}
				if(connectedList.contains(secondNode.getText())) {
					JOptionPane.showMessageDialog(frame, "Connected :)");
				}else {
					JOptionPane.showMessageDialog(frame, "Not Connected :(");
				}
				
			}
		}else if(e.getSource().equals(salesmanB)) {
			if(panel.getNode(salesmanStart.getText()) != null) {
				ArrayList<Node> firstNode = new ArrayList<Node>();
				firstNode.add(panel.getNode(salesmanStart.getText()));
				travelling(panel.getNode(salesmanStart.getText()), firstNode, 0);
				//make sure completed has a path
				System.out.println(completed + " completed");
			
				if(completed.isEmpty() == false) {// if completed has paths in it
					//find shortest
					
					int shortest = arrayTotal.get(0);
					for(int i = 0; i < completed.size(); i++) {
						if(shortest > arrayTotal.get(i)){//if the distance is less than that of the first path
							shortest = arrayTotal.get(i);
						}
					}
					System.out.println("shortest path: " + shortest);
				}
				//if does have path; find shortest path
				//print out value and the path
			}else {
				JOptionPane.showMessageDialog(frame, "Not a valid starting node!");
			}
		}
		
	}
	
	
	
	
	public void travelling(Node n, ArrayList<Node> path, int total) {
		
		//if the number of nodes in path is = to the number of nodes
		if(path.size() == panel.getNodeList().size()) {
			ArrayList<Node> p = new ArrayList<Node>();
			for(int i = 0; i < path.size(); i++) {
				p.add(path.get(i));
			}
			completed.add(p);
			arrayTotal.add(total);
			path.remove(path.size()-1);
			
			return;
		}else {
		
			// add this path to completed list
			// remove last thing in path
			// return
			//else
			// for each edge
			for(int i = 0; i < panel.edgeList.size(); i++) {
				Edge e = panel.edgeList.get(i);
				if(e.getOtherEnd(n) != null) {// if an edge in edgeList connects with the starting node
					if(path.contains(e.getOtherEnd(n)) == false) {//if the path is not already in the path list
						path.add(e.getOtherEnd(n));
						travelling(e.getOtherEnd(n), path, total + Integer.parseInt(e.getLabel()));
						
					}
				}
			}
			path.remove(path.size()-1);
		}
		//  see if they are connected to the current node
		//  if they are not already in the path
		//   add node to path
		//   travelling(connected node, path, total + edge cost);
		//remove the last thing in the path
	}

}

